import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../providers_stats.dart';
import 'hourly_bars_chart.dart';
import 'weekly_bars_chart.dart';

class ActivityStatsPanel extends ConsumerWidget {
  final String activityId;
  const ActivityStatsPanel({super.key, required this.activityId});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final scheme = Theme.of(context).colorScheme;

    // Providers
    final todayAsync  = ref.watch(statsTodayProvider(activityId));
    final weekAsync   = ref.watch(weekTotalProvider(activityId));
    final monthAsync  = ref.watch(monthTotalProvider(activityId));
    final yearAsync   = ref.watch(yearTotalProvider(activityId));
    final hourlyAsync = ref.watch(hourlyTodayProvider(activityId));
    final last7Async  = ref.watch(last7DaysProvider(activityId)); // <-- adapte le nom si besoin

    return Card(
      color: scheme.surfaceContainerHighest,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: scheme.outline.withOpacity(.20)),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Stats', style: Theme.of(context).textTheme.titleLarge),
            const SizedBox(height: 12),

            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                _StatChip(icon: Icons.calendar_today,       label: "Aujourd'hui", async: todayAsync),
                _StatChip(icon: Icons.calendar_view_week,    label: 'Semaine',     async: weekAsync),
                _StatChip(icon: Icons.calendar_view_month,   label: 'Mois',        async: monthAsync),
                _StatChip(icon: Icons.calendar_month,        label: 'Annee',       async: yearAsync),
              ],
            ),

            const SizedBox(height: 12),
            const Divider(),
            const SizedBox(height: 8),

            Text("R\u00E9partition horaire (aujourd'hui)",
                style: Theme.of(context).textTheme.bodyLarge),
            const SizedBox(height: 8),

            // Hourly chart -> expects `buckets:`
            hourlyAsync.when(
              loading: () => const _ChartPlaceholder(label: 'Chargement...'),
              error: (e, _) => _ChartError(e.toString()),
              data: (buckets) =>
              buckets.isEmpty ? const _ChartPlaceholder()
                  : HourlyBarsChart(buckets: buckets),
            ),

            const SizedBox(height: 16),
            const Divider(),
            const SizedBox(height: 8),

            Text('7 derniers jours', style: Theme.of(context).textTheme.bodyLarge),
            const SizedBox(height: 8),

            // Weekly chart -> expects `stats:`
            last7Async.when(
              loading: () => const _ChartPlaceholder(label: 'Chargement...'),
              error: (e, _) => _ChartError(e.toString()),
              data: (days) =>
              days.isEmpty ? const _ChartPlaceholder()
                  : WeeklyBarsChart(stats: days),
            ),
          ],
        ),
      ),
    );
  }
}

class _StatChip extends StatelessWidget {
  final IconData icon;
  final String label;
  final AsyncValue<int> async;

  const _StatChip({
    required this.icon,
    required this.label,
    required this.async,
  });

  @override
  Widget build(BuildContext context) {
    return async.when(
      loading: () => const Chip(
        avatar: Icon(Icons.hourglass_empty, size: 16),
        label: Text('...'),
      ),
      error: (e, _) => const Chip(
        avatar: Icon(Icons.error_outline, size: 16),
        label: Text('Err'),
      ),
      data: (m) => Chip(
        avatar: Icon(icon, size: 16),
        label: Text('$label: $m min'),
      ),
    );
  }
}

class _ChartPlaceholder extends StatelessWidget {
  final String label;
  const _ChartPlaceholder({this.label = 'Aucune donn\u00E9e'});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 160,
      alignment: Alignment.center,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Theme.of(context).colorScheme.outline.withOpacity(.25)),
      ),
      child: Text(label, style: Theme.of(context).textTheme.bodyMedium),
    );
  }
}

class _ChartError extends StatelessWidget {
  final String message;
  const _ChartError(this.message);

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 160,
      alignment: Alignment.center,
      padding: const EdgeInsets.symmetric(horizontal: 12),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Theme.of(context).colorScheme.error),
      ),
      child: Text('Erreur: $message', style: Theme.of(context).textTheme.bodyMedium),
    );
  }
}
